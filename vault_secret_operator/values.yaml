# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

# Top level configuration for the vault secrets operator deployment.
# This consists of a controller and a kube rbac proxy container.
controller:
  # Set the number of replicas for the operator.
  # @type: integer
  replicas: 1

  # Configure update strategy for multi-replica deployments.
  # Kubernetes supports types Recreate, and RollingUpdate
  # ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
  # Example:
  # strategy: {}
  #   rollingUpdate:
  #     maxSurge: 1
  #     maxUnavailable: 0
  #   type: RollingUpdate
  # @type: object
  strategy: {}

  # nodeSelector labels for vault-secrets-operator pod assignment.
  # @type: map
  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  # Example:
  # nodeSelector:
  #   beta.kubernetes.io/arch: amd64
  nodeSelector: {}

  # Toleration Settings for vault-secrets-operator pod.
  # The value is an array of PodSpec Toleration maps.
  # ref: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
  # @type: array<map>
  # Example:
  # tolerations:
  #  - key: "key1"
  #    operator: "Equal"
  #    value: "value1"
  #    effect: "NoSchedule"
  tolerations: []


  rbac:
    # clusterRoleAggregation defines the roles included in the aggregated ClusterRole.
    clusterRoleAggregation:
      # viewerRoles is a list of roles that will be aggregated into the viewer ClusterRole.
      # The role name must be that of any VSO resource type. E.g. "VaultAuth", "HCPAuth".
      # All values are case-insensitive.
      # Specifying '*' as the first element will include all roles in the aggregation.
      #
      # The ClusterRole name takes the form of `<chart-fullname>`-aggregate-role-viewer.
      #
      # Example usages:
      # all roles:
      # - '*'
      # individually specified roles:
      # - "VaultAuth"
      # - "HCPAuth"
      # @type: array<string>
      viewerRoles: []

      # editorRoles is a list of roles that will be aggregated into the editor ClusterRole.
      # The role name must be that of any VSO resource type. E.g. "VaultAuth", "HCPAuth".
      # All values are case-insensitive.
      # Specifying '*' as the first element will include all roles in the aggregation.
      #
      # The ClusterRole name takes the form of `<chart-fullname>`-aggregate-role-editor.
      #
      # Example usages:
      # all roles:
      # - '*'
      # individually specified roles:
      # - "VaultAuth"
      # - "HCPAuth"
      # @type: array<string>
      editorRoles: []

      # userFacingRoles is a map of roles that will be aggregated into the viewer and editor ClusterRoles.
      # See https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles for more information.
      # @type: object
      userFacingRoles:
        # view controls whether the aggregated viewer ClusterRole will be made available to the user-facing
        # 'view' ClusterRole. Requires the viewerRoles to be set.
        # @type: boolean
        view: false
        # view controls whether the aggregated editor ClusterRole will be made available to the user-facing
        # 'edit' ClusterRole. Requires the editorRoles to be set.
        # @type: boolean
        edit: false

  # Settings related to the kubeRbacProxy container. This container is an HTTP proxy for the
  # controller manager which performs RBAC authorization against the Kubernetes API using SubjectAccessReviews.
  kubeRbacProxy:
    # Image sets the repo and tag of the kube-rbac-proxy image to use for the controller.
    image:
      pullPolicy: IfNotPresent
      repository: quay.io/brancz/kube-rbac-proxy
      tag: v0.18.1

    # Configures the default resources for the kube rbac proxy container.
    # For more information on configuring resources, see the K8s documentation:
    # https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    # @recurse: true
    # @type: map
    resources:
      limits:
        cpu: 500m
        memory: 128Mi
      requests:
        cpu: 5m
        memory: 64Mi

  # Image pull secret to use for private container registry authentication which will be applied to the controllers
  # service account. Alternatively, the value may be specified as an array of strings.
  # Example:
  # ```yaml
  # imagePullSecrets:
  #   - name: pull-secret-name-1
  #   - name: pull-secret-name-2
  # ```
  # Refer to https://kubernetes.io/docs/concepts/containers/images/#using-a-private-registry.
  # @type: array<map>
  imagePullSecrets: []

  # Extra labels to attach to the deployment. This should be formatted as a YAML object (map)
  extraLabels: {}

  # This value defines additional annotations for the deployment. This should be formatted as a YAML object (map)
  annotations: {}

  # Settings related to the vault-secrets-operator container.
  manager:
    # Image sets the repo and tag of the vault-secrets-operator image to use for the controller.
    image:
      pullPolicy: IfNotPresent
      repository: hashicorp/vault-secrets-operator
      tag: 0.10.0

    # logging
    logging:
      # Sets the log level for the operator.
      # Builtin levels are: info, error, debug, debug-extended, trace
      level: info


    # Defines additional environment variables to be added to the
    # vault-secrets-operator manager container.
    # Example:
    #
    # ```yaml
    # extraEnv:
    #   - name: HTTP_PROXY
    #     value: http://proxy.example.com
    #   - name: VSO_OUTPUT_FORMAT
    #     value: json
    #   - name: VSO_CLIENT_CACHE_SIZE
    #     value: "20000"
    #   - name: VSO_CLIENT_CACHE_PERSISTENCE_MODEL
    #     value: "direct-encrypted"
    #   - name: VSO_MAX_CONCURRENT_RECONCILES
    #     value: "30"
    # ```
    # @type: array<map>
    extraEnv: []

    # Configures the default resources for the vault-secrets-operator container.
    # For more information on configuring resources, see the K8s documentation:
    # https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    # @recurse: true
    # @type: map
    resources:
      limits:
        memory: 256Mi
      requests:
        memory: 128Mi


# Configures the default VaultConnection CR which will be used by resources
# if they do not specify a VaultConnection reference. The name is 'default' and will
# always be installed in the same namespace as the operator.
# NOTE:
# * It is strongly recommended to deploy the vault secrets operator in a secure Vault environment
#   which includes a configuration utilizing TLS and installing Vault into its own restricted namespace.
defaultVaultConnection:
  # toggles the deployment of the VaultAuthMethod CR
  # @type: boolean
  enabled: true

  # Address of the Vault Server
  # @type: string
  # Example: http://vault.default.svc.cluster.local:8200
  address: "http://vault.default.svc.cluster.local:8200"

  # CACertSecret is the name of a Kubernetes secret containing the trusted PEM encoded CA certificate chain as `ca.crt`.
  # Note: This secret must exist prior to deploying the CR.
  # @type: string
  caCertSecret: ""

  # TLSServerName to use as the SNI host for TLS connections.
  # @type: string
  tlsServerName: ""

  # SkipTLSVerify for TLS connections.
  # @type: boolean
  skipTLSVerify: false


# Configures and deploys the default VaultAuthMethod CR which will be used by resources
# if they do not specify a VaultAuthMethod reference. The name is 'default' and will
# always be installed in the same namespace as the operator.
# NOTE:
# * It is strongly recommended to deploy the vault secrets operator in a secure Vault environment
#   which includes a configuration utilizing TLS and installing Vault into its own restricted namespace.
defaultAuthMethod:
  # toggles the deployment of the VaultAuthMethod CR
  # @type: boolean
  enabled: true

  # Vault namespace for the VaultAuthMethod CR
  # @type: string
  namespace: "vault-secrets-operator"

  # Kubernetes namespace glob patterns which are allow-listed for use with the default AuthMethod.
  # @type: array<string>
  allowedNamespaces: []

  # Vault Auth method to be used with the VaultAuthMethod CR
  # @type: string
  method: kubernetes

  # Mount path for the Vault Auth Method.
  # @type: string
  mount: kubernetes

  # Vault Kubernetes auth method specific configuration
  kubernetes:
    # Vault Auth Role to use
    # This is a required field and must be setup in Vault prior to deploying the helm chart
    # if `defaultAuthMethod.enabled=true`
    # @type: string
    role: "example"

    # Kubernetes ServiceAccount associated with the default Vault Auth Role
    # @type: string
    serviceAccount: default

    # Token Audience should match the audience of the vault kubernetes auth role.
    # @type: array<string>
    tokenAudiences: []

  # Vault JWT auth method specific configuration
  # jwt:
  #   # Vault Auth Role to use
  #   # This is a required field and must be setup in Vault prior to deploying the helm chart
  #   # if using the JWT for the default auth method.
  #   # @type: string
  #   role: ""

  #   # One of the following is required prior to deploying the helm chart
  #   # - K8s secret that contains the JWT
  #   # - K8s service account if a service account JWT is used as a Vault JWT auth token and needs generating by VSO

  #   # Name of Kubernetes Secret that has the Vault JWT auth token.
  #   # The Kubernetes Secret must contain a key named `jwt` which references the JWT token, and must exist in the namespace
  #   # of any consuming VaultSecret CR. This is a required field if a JWT token is provided.
  #   # @type: string
  #   secretRef: ""

  #   # Kubernetes ServiceAccount to generate a service account JWT
  #   # @type: string
  #   serviceAccount: "default"

  #   # Token Audience should match the bound_audiences or the `aud` list in bound_claims if applicable
  #   # of the Vault JWT auth role.
  #   # @type: array<string>
  #   tokenAudiences: []

  # AppRole auth method specific configuration
  # appRole:
  #   # AppRole Role's RoleID to use for authenticating to Vault.
  #   # This is a required field when using appRole and must be setup in Vault prior to deploying the
  #   # helm chart.
  #   # @type: string
  #   roleId: ""
  #   # Name of Kubernetes Secret that has the AppRole Role's SecretID used to authenticate with Vault.
  #   # The Kubernetes Secret must contain a key named `id` which references the AppRole Role's
  #   # SecretID, and must exist in the namespace of any consuming VaultSecret CR.
  #   # This is a required field when using appRole and must be setup in Vault prior to deploying the
  #   # helm chart.
  #   # @type: string
  #   secretRef: ""

  # AWS auth method specific configuration
  # aws:
  #   # Vault Auth Role to use
  #   # This is a required field and must be setup in Vault prior to deploying the helm chart
  #   # if using the AWS for the default auth method.
  #   # @type: string
  #   role: ""

  #   # AWS region to use for signing the authentication request
  #   # Optional, but most commonly will be the region where the EKS cluster is running
  #   # @type: string
  #   region: ""

  #   # Vault header value to include in the STS signing request
  #   # @type: string
  #   headerValue: ""

  #   # The role session name to use when creating a WebIdentity provider
  #   # @type: string
  #   sessionName: ""

  #   # The STS endpoint to use; if not set will use the default
  #   # @type: string
  #   stsEndpoint: ""

  #   # The IAM endpoint to use; if not set will use the default
  #   # @type: string
  #   iamEndpoint: ""

  #   # The name of a Kubernetes Secret which holds credentials for AWS. Supported keys include
  #   # `access_key_id`, `secret_access_key`, `session_token`
  #   # @type: string
  #   secretRef: ""

  #   # Name of a Kubernetes service account that is configured with IAM Roles
  #   # for Service Accounts (IRSA). Should be annotated with "eks.amazonaws.com/role-arn".
  #   # @type: string
  #   irsaServiceAccount: ""

  # # Params to use when authenticating to Vault
  # # params:
  # #   param-something1: "foo"
  # # @type: map
  # params: {}

  # # Headers to be included in all Vault requests.
  # # headers:
  # #   X-vault-something1: "foo"
  # # @type: map
  # headers: {}

  # VaultAuthGlobalRef
  # vaultAuthGlobalRef:
  #   #  toggles the inclusion of the VaultAuthGlobal configuration in the
  #   # default VaultAuth CR.
  #   # @type: boolean
  #   enabled: false
  #   # Name of the VaultAuthGlobal CR to reference.
  #   # @type: string
  #   name: ""

  #   # Namespace of the VaultAuthGlobal CR to reference.
  #   # @type: string
  #   namespace: ""

  #   # allow default globals
  #   # @type: boolean
  #   allowDefault:

  #   mergeStrategy:
  #     # merge strategy for headers
  #     # @type: string
  #     # Valid values are: "replace", "merge", "none"
  #     # Default: "replace"
  #     # @type: string
  #     headers: none

  #     # merge strategy for params
  #     # @type: string
  #     # Valid values are: "replace", "merge", "none"
  #     # Default: "replace"
  #     # @type: string
  #     params: none

# Configures a Prometheus ServiceMonitor
telemetry:
  serviceMonitor:
    # The Prometheus operator *must* be installed before enabling this feature,
    # if not the chart will fail to install due to missing CustomResourceDefinitions
    # provided by the operator.
    #
    # Instructions on how to install the Helm chart can be found here:
    #  https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack
    # More information can be found here:
    #  https://github.com/prometheus-operator/prometheus-operator
    #  https://github.com/prometheus-operator/kube-prometheus

    # Enable deployment of the Vault Secrets Operator ServiceMonitor CustomResource.
    # @type: boolean
    enabled: true

    # Selector labels to add to the ServiceMonitor.
    # When empty, defaults to:
    #  release: prometheus
    # @type: string
    selectors: {}

    # Scheme of the service Prometheus scrapes metrics from. This must match the scheme of the metrics service of VSO
    # @type: string
    scheme: https

    # Port at which Prometheus scrapes metrics. This must match the port of the metrics service of VSO
    # @type: string
    port: https

    # Path at which Prometheus scrapes metrics
    # @type: string
    path: /metrics

    # File Prometheus reads bearer token from for scraping metrics
    # @type: string
    bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token

    # Interval at which Prometheus scrapes metrics
    # @type: string
    interval: 30s

    # Timeout for Prometheus scrapes
    # @type: string
    scrapeTimeout: 10s

