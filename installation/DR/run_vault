#!/bin/bash

set -e

readonly VAULT_CONFIG_FILE="default.hcl"
readonly VAULT_ENV_FILE="default.env"
readonly VAULT_PID_FILE="vault-pid"
readonly VAULT_TOKEN_FILE="vault-token"
readonly SYSTEMD_CONFIG_PATH="/etc/systemd/system/vault.service"

readonly DEFAULT_LOG_LEVEL="info"

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly SCRIPT_NAME="$(basename "$0")"

function print_usage {
  echo
  echo "Usage: run-vault [OPTIONS]"
  echo
  echo "This script is used to configure and run Vault on an AWS server."
  echo
  echo "Options:"
  echo
  echo -e "  --config-dir\t\tThe path to the Vault config folder. Optional. Default is the absolute path of '../config', relative to this script."
  echo -e "  --bin-dir\t\tThe path to the folder with Vault binary. Optional. Default is the absolute path of the parent folder of this script."
  echo -e "  --data-dir\t\tThe path to the Vault data folder. Optional. Default is the absolute path of '../data', relative to this script."
  echo -e "  --log-level\t\tThe log verbosity to use with Vault. Optional. Default is $DEFAULT_LOG_LEVEL."
  echo -e "  --systemd-stdout\t\tThe StandardOutput option of the systemd unit.  Optional.  If not configured, uses systemd's default (journal)."
  echo -e "  --systemd-stderr\t\tThe StandardError option of the systemd unit.  Optional.  If not configured, uses systemd's default (inherit)."
  echo -e "  --user\t\tThe user to run Vault as. Optional. Default is to use the owner of --config-dir."
  echo
  echo "Examples:"
  echo
  echo "  run-vault"
  echo
}

function log {
  local -r level="$1"
  local -r message="$2"
  local -r timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  >&2 echo -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
}

function log_info {
  local -r message="$1"
  log "INFO" "$message"
}

function log_warn {
  local -r message="$1"
  log "WARN" "$message"
}

function log_error {
  local -r message="$1"
  log "ERROR" "$message"
}

# Based on code from: http://stackoverflow.com/a/16623897/483528
function strip_prefix {
  local -r str="$1"
  local -r prefix="$2"
  echo "${str#$prefix}"
}

function assert_not_empty {
  local -r arg_name="$1"
  local -r arg_value="$2"

  if [[ -z "$arg_value" ]]; then
    log_error "The value for '$arg_name' cannot be empty"
    print_usage
    exit 1
  fi
}

function assert_is_installed {
  local -r name="$1"

  if [[ ! $(command -v ${name}) ]]; then
    log_error "The binary '$name' is required by this script but is not installed or in the system's PATH."
    exit 1
  fi
}

function generate_vault_config {
  local -r path_to_config="$1"
  local -r config_dir="$2"
  local -r user="$3"
  local -r path_to_env="$4"
  local -r config_path="$config_dir/$VAULT_CONFIG_FILE"
  local -r env_path="$config_dir/$VAULT_ENV_FILE"

  if [[ -f "$path_to_config" ]]; then
    echo "Using local file: $path_to_config"

    # if [[ -f "$config_path" ]]; then
    #     read -p "File $config_path already exists. Overwrite? (y/n): " choice
    #     case "$choice" in
    #     y|Y ) echo "Overwriting existing file...";;
    #     n|N ) echo "Vault config stayed the same."; exit 0;;
    #     * ) echo "Invalid choice."; exit 1;;
    #     esac
    # fi
    
    sudo cp -f "$path_to_config" "$config_path"
    sudo cp -f "$path_to_env" "$env_path"

    sudo chown "$user:$user" "$config_path"
    sudo chown "$user:$user" "$env_path"
  else
    echo "Error: $path_to_config file not found."
    exit 1
  fi


}

function generate_systemd_config {
  local -r systemd_config_path="$1"
  local -r vault_config_dir="$2"
  local -r vault_bin_dir="$3"
  local -r vault_log_level="$4"
  local -r vault_systemd_stdout="$5"
  local -r vault_systemd_stderr="$6"
  local -r vault_user="$7"
  local -r config_path="$config_dir/$VAULT_CONFIG_FILE"

  local vault_description="HashiCorp Vault - A tool for managing secrets"
  local vault_command="server"
  local vault_config_file_or_dir="$vault_config_dir"  # Vault agent requires single file, but server can accept config dir.


  log_info "Creating systemd config file to run Vault in $systemd_config_path"

  local -r unit_config=$(cat <<EOF
[Unit]
Description="$vault_description"
Documentation=https://www.vaultproject.io/docs/
Requires=network-online.target
After=network-online.target
ConditionFileNotEmpty=$config_path
StartLimitIntervalSec=60
StartLimitBurst=3

EOF
)

  local -r service_config=$(cat <<EOF
  
[Service]
EnvironmentFile=$vault_config_file_or_dir/$VAULT_ENV_FILE
User=$vault_user
Group=$vault_user
ProtectSystem=full
ProtectHome=read-only
PrivateTmp=yes
PrivateDevices=yes
SecureBits=keep-caps
AmbientCapabilities=CAP_IPC_LOCK
Capabilities=CAP_IPC_LOCK+ep
CapabilityBoundingSet=CAP_SYSLOG CAP_IPC_LOCK
NoNewPrivileges=yes
ExecStart=$vault_bin_dir/vault $vault_command -config $vault_config_file_or_dir/$VAULT_CONFIG_FILE -log-level=$vault_log_level
ExecReload=/bin/kill --signal HUP \$MAINPID
KillMode=process
KillSignal=SIGINT
Restart=on-failure
RestartSec=5
TimeoutStopSec=30
StartLimitInterval=60
StartLimitBurst=3
LimitNOFILE=65536
LimitMEMLOCK=infinity
LimitCORE=0

EOF
)

  local log_config=""
  if [[ ! -z $vault_systemd_stdout ]]; then
    log_config+="StandardOutput=$vault_systemd_stdout\n"
  fi
  if [[ ! -z $vault_systemd_stderr ]]; then
    log_config+="StandardError=$vault_systemd_stderr\n"
  fi

  local -r install_config=$(cat <<EOF
[Install]
WantedBy=multi-user.target
EOF
)
  sudo touch "$systemd_config_path"
  sudo echo -e "$unit_config" > "$systemd_config_path"
  sudo echo -e "$service_config" >> "$systemd_config_path"
  sudo echo -e "$log_config" >> "$systemd_config_path"
  sudo echo -e "$install_config" >> "$systemd_config_path"
}

function start_vault {
  log_info "Reloading systemd config and starting Vault"

  sudo systemctl daemon-reload
  sudo systemctl enable vault.service
  sudo systemctl restart vault.service
}

# Based on: http://unix.stackexchange.com/a/7732/215969
function get_owner_of_path {
  local -r path="$1"
  ls -ld "$path" | awk '{print $3}'
}

function run {
  local path_to_config=""
  local path_to_env=""
  local config_dir="/opt/vault/config"
  local bin_dir="/usr/local/bin"
  local log_level="$DEFAULT_LOG_LEVEL"
  local systemd_stdout=""
  local systemd_stderr=""
  local user="vault"
  local all_args=()

  while [[ $# > 0 ]]; do
    local key="$1"

    case "$key" in
        --path-to-config)
        assert_not_empty "$key" "$2"
        path_to_config="$2"
        shift
        ;;
    --path-to-env-file)
        assert_not_empty "$key" "$2"
        path_to_env="$2"
        shift
        ;;
      --config-dir)
        assert_not_empty "$key" "$2"
        config_dir="$2"
        shift
        ;;
      --bin-dir)
        assert_not_empty "$key" "$2"
        bin_dir="$2"
        shift
        ;;
      --log-level)
        assert_not_empty "$key" "$2"
        log_level="$2"
        shift
        ;;
      --systemd-stdout)
        assert_not_empty "$key" "$2"
        systemd_stdout="$2"
        shift
        ;;
      --systemd-stderr)
        assert_not_empty "$key" "$2"
        systemd_stderr="$2"
        shift
        ;;
      --user)
        assert_not_empty "$key" "$2"
        user="$2"
        shift
        ;;
      --help)
        print_usage
        exit
        ;;
      *)
        log_error "Unrecognized argument: $key"
        print_usage
        exit 1
        ;;
    esac

    shift
  done


  assert_is_installed "systemctl"
#   assert_is_installed "aws"
  assert_is_installed "curl"
  assert_is_installed "jq"

  if [[ -z "$config_dir" ]]; then
    config_dir=$(cd "$SCRIPT_DIR/../config" && pwd)
  fi

  # If $systemd_stdout and/or $systemd_stderr are empty, we leave them empty so that generate_systemd_config will use systemd's defaults (journal and inherit, respectively)

  if [[ -z "$bin_dir" ]]; then
    bin_dir=$(cd "$SCRIPT_DIR/../bin" && pwd)
  fi

  if [[ -z "$user" ]]; then
    user=$(get_owner_of_path "$config_dir")
  fi

  log_info "Running as Vault server"
  generate_vault_config \
    "$path_to_config" \
    "$config_dir" \
    "$user" \
    "$path_to_env"

  generate_systemd_config "$SYSTEMD_CONFIG_PATH" "$config_dir" "$bin_dir" "$log_level" "$systemd_stdout" "$systemd_stderr" "$user"
  start_vault
}

run "$@"